# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: write
  packages: write

jobs:
  
  tags:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.tag.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Bump version and push tag
        id: tag_version
        if: github.ref == 'refs/heads/main'
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN  }}
      - name: Add tag to output step for main branch
        id: tag
        run: |
          if [ '${{ github.ref }}' = 'refs/heads/main' ]; then
            echo "new_version=${{ steps.tag_version.outputs.new_version }}" >> $GITHUB_OUTPUT
          else
            echo "new_version=pr-${{ github.event.number }}-${{ github.run_number }}" >> $GITHUB_OUTPUT
          fi
  
  build:
    needs: [tags]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Run unit test
      working-directory: ./Anthony.Parent.ObjectDetection.Tests/
      run: dotnet test  /p:CoverletOutputFormat=opencover /p:CoverletOutput=./coverage/opencover.xml
    - name: Publish WEB API
      run: dotnet publish ./Anthony.Parent.ObjectDetection.WebApi.csproj --self-contained true --output ./win-x64/objectDetection -c Release -r win-x64 /p:PublishSingleFile=true
    - name: Upload WebApp1 Build Artifact
      uses: actions/upload-artifact@v4
      with:          
        name: Publish win-x64 objectDetection
        path: ./win-x64/objectDetection
